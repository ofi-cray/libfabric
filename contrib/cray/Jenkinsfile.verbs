// Copyright (c) 2018. Cray Inc. All rights reserved.
// Libfabric Verbs provider Jenkins Pipeline file

// This pipeline uses shared pipeline libraries for the following
// functions:
//   -- launch
//   -- publish
@Library('CrayNetworkCI@master') _
@Library('dst-shared@master') _

pipeline {
    options {
        // Generic build options
        timeout (time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '15'))

        // Build options
        disableConcurrentBuilds()
        timestamps()
        skipStagesAfterUnstable()
    }
    agent {
        node {
            label 'wham'
        }
    }
    stages {
        stage('Prologue') {
            steps {
                // creating git short hash
                script {
                    GIT_SHORT_COMMIT = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    LIBFABRIC_INSTALL = pwd tmp: true
                }

                dir ('contrib/cray/bin') {
                    // verify requirements
                    sh './verify_requirements.sh'

                    // install python environment if necessary
                    sh './setup.sh'
                }
            }
        }
        stage('Build') {
            options {
                timeout (time: 5, unit: 'MINUTES')
            }
            steps {
                sh './autogen.sh'
                sh "./configure --prefix=$LIBFABRIC_INSTALL"
                sh "make -j 12"
                sh "make install"
            }
        }
        stage('Test') {
            environment {
                LD_LIBRARY_PATH = "$LIBFABRIC_INSTALL/lib:$LD_LIBRARY_PATH"
                MPIR_CVAR_OFI_USE_PROVIDER = 'verbs;ofi_rxm'
                LIBFABRIC_INSTALL_PATH = "$LIBFABRIC_INSTALL"
            }
            options {
                timeout (time: 12, unit: 'MINUTES')
            }
            parallel {
                stage('Unit tests') {
                    steps {
                        echo 'placeholder'
                    }
                }
                stage('Smoke tests') {
                    steps {
                        tee ('smoketests.tap') {
                            sh '${BATS_INSTALL_PATH}/bats -t contrib/cray/bats/smoketests.bats'
                        }
                    }
                    post {
                        always {
                            sh """contrib/cray/bin/parse_logfiles.sh \\
                                    -r smoketests.tap \\
                                    -w smoketests.xml \\
                                    tap simple.smoketests simple"""

                            step ([$class: 'XUnitBuilder',
                               thresholds: [
                                    [$class: 'FailedThreshold', unstableThreshold: '0']],
                                    tools: [[$class: 'JUnitType', pattern: "smoketests.xml"]]])
                        }
                    }
                }
                stage('Functional Tests') {
                    steps {
                        dir ("fabtests") {
                            sh './autogen.sh'
                            sh "./configure --with-libfabric=$LIBFABRIC_INSTALL --prefix=$FABTEST_PATH"
                            sh "make -j12"
                            sh "make -j12 install"
                        }
                        tee ('fabtests.log') {
                            sh 'srun -n 2 --ntasks-per-node=1 contrib/cray/bin/fabtest_wrapper.sh -p ${FABTEST_PATH}/bin -v -T 60'
                        }
                    }
                    post {
                        always {
                            sh """contrib/cray/bin/parse_logfiles.sh \\
                                    -r fabtests.log \\
                                    -w fabtests.xml \\
                                    fabtests \\
                                    functional.fabtests.quick \\
                                    functional"""

                            step ([$class: 'XUnitBuilder',
                               thresholds: [
                                    [$class: 'FailedThreshold', unstableThreshold: '0']],
                                    tools: [[$class: 'JUnitType', pattern: "fabtests.xml"]]])
                        }
                    }
                }
                stage('SFT tests') {
                    environment {
                        SFT_BIN = "${SFT_INSTALL_PATH + '/bin'}"
                        SFT_ADD_ARGS = "--additional-args ' '"
                        SFT_MAX_JOB_TIME = '3'
                        SFT_NUM_JOBS = '4'
                        SFT_PROVIDER = 'verbs;ofi_rxm'
                        SFT_BASELINE_DIR = "contrib/cray"
                        SFT_BASELINE_RESULTS_FILE = 'sft_test_results_baseline.txt'
                        SFT_PREVIOUS_BASELINE_RESULTS = 'sft_test_results_baseline.txt'
                        SFT_TEST_CMDS = 'sft_test_commands'
                        SFT_TEST_RESULTS = '_test_results.xml'
                        SFT_TEST_RESULTS_EXPECTED = 'expected_'
                        SFT_TEST_RESULTS_PREFIX = 'BUILD_'
                        SFT_TEST_RESULTS_CI = 'sft_ci_results.yaml'
                        SFT_TEST_RESULTS_BASE_DIR = "${ROOT_BUILD_PATH}" + "/sft_test_results/"
                        SFT_TEST_RESULTS_DIR = ""
                    }
                    steps {
                        script {
                            def cur_date_time = new Date().format('yyyy_MM_dd_HH_mm_ss')
                            SFT_TEST_RESULTS_SUBDIR = "${SFT_TEST_RESULTS_PREFIX}" + env.BUILD_ID + "_DATE_" + "${cur_date_time}"
                            SFT_TEST_RESULTS_DIR = "${SFT_TEST_RESULTS_BASE_DIR}" + "${SFT_TEST_RESULTS_SUBDIR}"
                        }
                        // Simple clean-up from any prior run
                        sh """
                            rm -f ${SFT_BIN}/core*
                            rm -rf ${SFT_TEST_RESULTS_DIR}
                            mkdir -p ${SFT_TEST_RESULTS_DIR}
                        """

                        timeout (time: 10, unit: 'MINUTES') {
                            // run the test
                            script {
                                try {
                                    dir ("${SFT_BIN}") {
                                        sh """
                                            ./ci-all.sh \\
                                                --provider '${SFT_PROVIDER}' \\
                                                -L ${SFT_TEST_RESULTS_DIR} \\
                                                --num-jobs ${SFT_NUM_JOBS} \\
                                                --max-job-time ${SFT_MAX_JOB_TIME} \\
                                                --output-cmds ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_CMDS} \\
                                                --results-file ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_CI} \\
                                                ${SFT_ADD_ARGS}
                                        """
                                    }
                                } catch (exc) {
                                    echo 'failed test, ignore result for now'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            sh """
                                cp  ./${SFT_BASELINE_DIR}/${SFT_BASELINE_RESULTS_FILE} ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE}
                                ${SFT_BIN}/sft_parse_test_results.pm -b ${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE} -d ${SFT_TEST_RESULTS_DIR} -o sft_MESSAGE${SFT_TEST_RESULTS} -r ${SFT_BASELINE_RESULTS_FILE} -p "TR_MESSAGE"
                                ${SFT_BIN}/sft_parse_test_results.pm -b ${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE} -d ${SFT_TEST_RESULTS_DIR} -o sft_RMA${SFT_TEST_RESULTS} -r ${SFT_BASELINE_RESULTS_FILE} -p "TR_RMA"
                                ${SFT_BIN}/sft_parse_test_results.pm -b ${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE} -d ${SFT_TEST_RESULTS_DIR} -o sft_TAGGED${SFT_TEST_RESULTS} -r ${SFT_BASELINE_RESULTS_FILE} -p "TR_TAGGED"
                                gzip -r ${SFT_TEST_RESULTS_DIR}
                                gunzip ${SFT_TEST_RESULTS_DIR}/sft_*${SFT_TEST_RESULTS}.gz
                                gunzip ${SFT_TEST_RESULTS_DIR}/${SFT_BASELINE_RESULTS_FILE}
                                gunzip ${SFT_TEST_RESULTS_DIR}/${SFT_TEST_RESULTS_EXPECTED}${SFT_BASELINE_RESULTS_FILE}
                                cp -r ${SFT_TEST_RESULTS_DIR} .
                            """
                            // archive the results
                            archiveArtifacts artifacts: "${SFT_TEST_RESULTS_SUBDIR}/*"

                            // skip validation of SFT for now until intermittent errors are fixed
                            step ([$class: 'XUnitBuilder',
                               thresholds: [
                                    [$class: 'FailedThreshold', unstableThreshold: '100']],
                                    tools: [[$class: 'JUnitType', pattern: "${SFT_TEST_RESULTS_SUBDIR}/sft_*${SFT_TEST_RESULTS}"]]])

                            // remove result directory after parsing
                            sh "rm -rf ${SFT_TEST_RESULTS_DIR} || true"
                        }
                    }
                }
                stage("System tests") {
                    steps {
                        echo 'placeholder'
                    }
                }
                stage("Applications") {
                    steps {
                        tee ('mpi.tap') {
                            timeout(time: 5, unit: 'MINUTES') {
                                sh '${BATS_INSTALL_PATH}/bats -t contrib/cray/bats/mpi.bats'
                            }
                        }
                    }
                    post {
                        always {
                            sh """contrib/cray/bin/parse_logfiles.sh \\
                                    -r mpi.tap \\
                                    -w mpi.xml \\
                                    tap applications.mpi applications"""

                            step ([$class: 'XUnitBuilder',
                               thresholds: [
                                    [$class: 'FailedThreshold', unstableThreshold: '0']],
                                    tools: [[$class: 'JUnitType', pattern: "mpi.xml"]]])
                        }
                    }
                }
            }
        }
        stage("Install Libfabric Build") {
            when {
                allOf {
                    expression { currentBuild.result == 'SUCCESS' } ;
                    anyOf {
                        expression { env.BRANCH_NAME == 'master' } ;
                        buildingTag() ;
                    }
                }
            }
            environment {
                LIBFABRIC_INSTALL_PATH="${LIBFABRIC_BUILD_PATH + '/' + GIT_SHORT_COMMIT}"
            }
            steps {
                sh './autogen.sh'
                sh "./configure --prefix=$LIBFABRIC_INSTALL_PATH"
                sh "make -j 12"
                sh "make install"
            }
        }
        stage("Deploy") {
            when {
                allOf {
                    expression { currentBuild.result == 'SUCCESS' } ;
                    anyOf {
                        expression { env.BRANCH_NAME == 'master' } ;
                        buildingTag()
                    }
                }
            }
            options {
                timeout (time: 5, unit: 'MINUTES')
            }
            environment {
                TAG_DIRECTORY = "${LIBFABRIC_BUILD_PATH + '/tags'}"
            }
            failFast true
            parallel {
                stage("Create nightly link") {
                    when {
                        expression { env.BRANCH_NAME == 'master' }
                    }
                    steps {
                        dir (env.TAG_DIRECTORY) {
                            sh "rm -f nightly || true"
                            sh "ln -s ../$GIT_SHORT_COMMIT nightly"
                        }
                    }
                }
                stage("Create tagged link") {
                    when {
                        buildingTag()
                    }
                    steps {
                        dir (env.TAG_DIRECTORY) {
                            sh "rm -f $BRANCH_NAME || true"
                            sh "ln -s ../$GIT_SHORT_COMMIT $BRANCH_NAME"
                        }
                    }
                }
                stage("Create RPMs") {
                    steps {
                        sh 'make dist-bzip2'
                        sh '$WORKSPACE/contrib/buildrpm/buildrpmLibfabric.sh -i verbs -i sockets -osmv $(ls libfabric-*.tar.bz2)'
                    }
                    post {
                        success {
                            stash name: 'rpms', includes: 'rpmbuild/RPMS/**/*'
                            stash name: 'sources',  includes: 'rpmbuild/SOURCES/*'
                        }
                    }
                }
            }
        }
	stage('Publish') {
	    when {
		expression { env.BRANCH_NAME == 'feature/dst-integration' } 
	    }
	    steps {
                transfer(artifactName: 'rpmbuild/RPMS/libfabric-*tar.bz2')
	    }
	}
    }
    post {
        success {
            script {
                try {
                    unstash 'rpms'
                    unstash 'sources'
                    archiveArtifacts 'rpmbuild/SOURCES/*'
                    archiveArtifacts 'rpmbuild/RPMS/**/*'
                }
                catch (Exception e) {
                    echo 'No rpms to archive'
                }
            }
        }
        changed {
            script {
                // send email when the state of the pipeline changes
                // only sends email to @cray.com
                def emailBody = '${SCRIPT, template="libfabric-template.groovy"}'
                def providers = []
                def defaultMailer = ''

                if (env.BRANCH_NAME == 'master') {
                    defaultMailer = mailingList()
                } else {
                    providers.add ( [$class: 'CulpritsRecipientProvider'] )
                    providers.add ( [$class: 'RequesterRecipientProvider'] )
                    providers.add ( [$class: 'DevelopersRecipientProvider'] )
                }
                emailext subject: '$DEFAULT_SUBJECT',
                    body: emailBody,
                    mimeType: 'text/html',
                    recipientProviders: providers,
                    replyTo: '$DEFAULT_REPLYTO',
                    to: defaultMailer
             }
        }
    }
    environment {
        ROOT_BUILD_PATH = "/scratch/jenkins/builds"
        FABTEST_PATH = "${WORKSPACE + '/installs/fabtests'}"
        LIBFABRIC_BUILD_PATH = "${ROOT_BUILD_PATH + '/libfabric'}"
        OMB_BUILD_PATH = "${ROOT_BUILD_PATH + '/osu-micro-benchmarks/5.4.2/libexec/osu-micro-benchmarks/mpi'}"
        MPICH_PATH = "${ROOT_BUILD_PATH + '/mpich/3.3b3'}"
        SFT_INSTALL_PATH = "${ROOT_BUILD_PATH + '/libfabric-sft/stable'}"
        BATS_INSTALL_PATH = "${ROOT_BUILD_PATH + '/bats/stable/bin'}"
    }
}
